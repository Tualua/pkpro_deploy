# Kickstart script for PlayKey Pro Host
# Copyright by Dmitry Popovich, 2021
# dsp@itl24.ru

#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512
# Use graphical install
text
reboot
# Run the Setup Agent on first boot
firstboot --disable
%pre --interpreter /bin/bash --log=/tmp/ks-pre.log
# Backup fds in temporal ones
exec {STDOUTBACK}>&1
exec {STDERRBACK}>&2

# Go to current terminal for pre% section
exec 1>>/dev/pts/0
exec 2>>/dev/pts/0
BACKTITLE1="PlayKey Host Installer"
BACKTITLE=$BACKTITLE1
HOSTNAME=""
SYSDISKPATH=""
SYSDISKMODEL=""
ZFSDISKPATH=""
ZFSDISKMODEL=""
IFNAME=""
function run_step() {
    case $1 in
        1)
            whiptail --fb --title "PlayKey Host Installer" --backtitle "$BACKTITLE" --msgbox "Welcome to PlayKey Host installer!" 10 40
            ;;
        2)
            get_hostname
            ;;
        3)
            get_netif
            ;;
        4)
            get_disk_sys
            ;;
        5)
            get_disk_zfs
            ;;
        6)
            get_pkid
            ;;
        7)
            disk_confirm $SYSDISKPATH
            ;;
        8)
            final_confirm
            ;;
    esac        
}

trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   
    printf '%s' "$var"
}

#Network config
function get_hostname() {
    HOSTNAMESEL=$(whiptail --fb --title "Hostname" --backtitle "$BACKTITLE" --inputbox "Please enter hostname" 10 40 3>&2 2>&1 1>&3)
    local exitstatus=$?
    if [ $exitstatus -ne 0 ]; then
        return $exitstatus
    else
        BACKTITLE="$BACKTITLE1: $HOSTNAMESEL"
        HOSTNAME=$HOSTNAMESEL
    fi
}

function get_netif() {
    local IFACESTRING=""
    for IFACE in $(ip -o link show up | grep -v loopback|awk -F": " '{ print $2 }')
    do
        IFACEMAC=$(ip -o link show $IFACE|awk -F" " '{ print $17 }')
        IFACESTRING+="$IFACE $IFACEMAC "
    done
    local IFACESEL=$(whiptail --fb --title "Network interface" --backtitle "$BACKTITLE" --menu "Please select network interface" 22 40 10 $IFACESTRING 3>&2 2>&1 1>&3)
    if [ -z "$IFACESEL" ]; then
        return 1
    else
        IFNAME=$IFACESEL
        echo $IFNAME > /tmp/ifname
    fi
}

function get_disk_sys() {
    MENUSTRING=""
    for dev_path in $(lsblk -d -n -p -oNAME,RO,MOUNTPOINT | grep -v -E "loop|install|sr[0-9]" | awk {'print $1'})
    do
        if [[ "$dev_path" != *loop* ]]
        then
            dev_name=$(echo $dev_path|awk -F"/" '{print $NF}')
            if [ -e /sys/class/block/$dev_name/device/model ]
            then
                disk_model=$(cat /sys/class/block/$dev_name/device/model)
            else
                disk_model=UNKNOWN
            fi
            disk_model_trim=$(trim "$disk_model"|sed -e 's/ /_/g')
            MENUSTRING+="$dev_path $disk_model_trim "
        fi
    done
    local DISKSEL=$(whiptail --fb --title "System Disk Selection" --backtitle "$BACKTITLE" --menu "Please select system disk" 22 50 10 $MENUSTRING 3>&2 2>&1 1>&3)
    if [ -z "$DISKSEL" ]
    then
        return 1
    else
        SYSDISKPATH=$DISKSEL
        dev_name=$(echo $SYSDISKPATH|awk -F"/" '{print $NF}')
        if [ -e /sys/class/block/$dev_name/device/model ]
        then
            SYSDISKMODEL=$(cat /sys/class/block/$dev_name/device/model)
        else
            SYSDISKMODEL=UNKNOWN
        fi
    fi
}

function get_disk_zfs() {
    MENUSTRING=""
    for dev_path in $(lsblk -d -n -p -oNAME,RO,MOUNTPOINT | grep -v -E "loop|install|sr[0-9]" | awk {'print $1'})
    do
        if [[ "$dev_path" != *loop* ]] && [[ "$dev_path" != "$SYSDISKPATH" ]]
        then
            dev_name=$(echo $dev_path|awk -F"/" '{print $NF}')
            if [ -e /sys/class/block/$dev_name/device/model ]
            then
                disk_model=$(cat /sys/class/block/$dev_name/device/model)
            else
                disk_model=UNKNOWN
            fi
            disk_model_trim=$(trim "$disk_model"|sed -e 's/ /_/g')
            MENUSTRING+="$dev_path $disk_model_trim "
        fi
    done
    local DISKSEL=$(whiptail --fb --title "Games Disk Selection" --backtitle "$BACKTITLE" --menu "Please select games disk" 22 50 10 $MENUSTRING 3>&2 2>&1 1>&3)
    if [ -z "$DISKSEL" ]
    then
        return 1
    else
        ZFSDISKPATH=$DISKSEL
        dev_name=$(echo $ZFSDISKPATH|awk -F"/" '{print $NF}')
        if [ -e /sys/class/block/$dev_name/device/model ]
        then
            ZFSDISKMODEL=$(cat /sys/class/block/$dev_name/device/model)
        else
            ZFSDISKMODEL=UNKNOWN
        fi
        echo $ZFSDISKPATH > /tmp/zfsdisk
    fi
}

function get_pkid() {
    PKIDSEL=$(whiptail --fb --title "PlayKey ID" --backtitle "$BACKTITLE" --inputbox "Please enter your PlayKey ID" 10 40 3>&2 2>&1 1>&3)
    local exitstatus=$?
    if [ $exitstatus -ne 0 ]; then
        return $exitstatus
    else
        echo $PKIDSEL > /tmp/pkid
    fi
}
#Disk layout config
function disk_confirm() {
    PARTTABLE=$( lsblk -lf -oNAME,FSTYPE,SIZE $1)
    MSG="\n --- ALL CONTENTS WILL BE DELETED! --- \n\n $PARTTABLE \n\n --- ALL CONTENTS WILL BE DELETED! ---\n\n Are you sure?"
    whiptail --fb --title "Confirm" --backtitle "$BACKTITLE" --yesno "$MSG" 23 50
    if [ $? -ne 0 ]; then
            return 1
    else
        return 0
    fi
}

function config_disk() {
    DISKNAME=$(echo $SYSDISKPATH|cut -d '/' -f 3)
    echo "bootloader --append=\" crashkernel=auto\" --location=mbr --boot-drive=$DISKNAME" >> /tmp/include-part
    echo "ignoredisk --only-use=$DISKNAME" > /tmp/include-part
    echo "clearpart --drives=$DISKNAME --initlabel" >> /tmp/include-part
    echo "clearpart --drives=$DISKNAME --all" >> /tmp/include-part
    echo "autopart --type=plain --nohome" >> /tmp/include-part
    
}

function config_network() {
    echo "network  --bootproto=dhcp --device=$IFNAME --ipv6=auto --activate --hostname=$HOSTNAME" > /tmp/include-net
    
}

function final_confirm() {
    MSG="If you press YES all contents of $SYSDISKMODEL on $SYSDISKPATH will be erased!"
    whiptail --fb --title "Confirm" --backtitle "$BACKTITLE" --yesno "$MSG" 23 30
    if [ $? -ne 0 ]; then
            return 1
    else
        STEP=0        
    fi
}

STEP=1
while [ $STEP -ne 0 ]
do
    run_step $STEP
    exitstatus=$?
    if [ $exitstatus -ne 0 ]; then
        ((STEP-=1))
    else
        if [ $STEP -ne 0 ]; then
            ((STEP+=1))
        else
            continue
        fi
    fi
done
config_disk
config_network

# Restore fds
exec 1>&$STDOUTBACK
exec 2>&$STDERRBACK

# Close temporal fds
exec {STDOUTBACK}>&-
exec {STDERRBACK}>&-
%end
%include /tmp/include-part
%include /tmp/include-net

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Repositories
repo --name=centos-updates --mirrorlist="http://mirrorlist.centos.org/?release=7&arch=x86_64&repo=updates"
repo --name=centos-extras --mirrorlist="http://mirrorlist.centos.org/?release=7&arch=x86_64&repo=extras"
repo --name=epel --mirrorlist="https://mirrors.fedoraproject.org/mirrorlist?repo=epel-7&arch=x86_64"
repo --name="elastic-6.x" --baseurl="https://artifacts.elastic.co/packages/6.x/yum"

# Use network installation
url --mirrorlist="http://mirrorlist.centos.org/?release=7&arch=x86_64&repo=os"
# Root password
rootpw --iscrypted $6$dt6TFlmpgg3SZtMu$cXmKeg2P5q3sIuIq2U1zbSYCDYuCuEU5wN5YiXIplRicgXaDdN4..oPpnRWYFQhs8QTMpjE7IN96pODplv4q51
# System services
services --enabled="chronyd"
# System timezone
timezone Europe/Moscow --isUtc
user --groups=wheel --name=gamer --password=$6$yTmCGS10mQrvejs2$.9AA2fQspZg7HTdKAhRrVfPTRDbbyxd3hn.D51ZFuBgoUrXErqW3bl88/3YJHC2UfoH.qTk0oqtkvrT7T9CsY/ --iscrypted --gecos="gamer"
user --groups=wheel --name=admin --password=$6$yTmCGS10mQrvejs2$.9AA2fQspZg7HTdKAhRrVfPTRDbbyxd3hn.D51ZFuBgoUrXErqW3bl88/3YJHC2UfoH.qTk0oqtkvrT7T9CsY/ --iscrypted --gecos="admin"

%packages
@^minimal
@core
chrony
kexec-tools
-firewalld
nano
mc
wget
tmux
epel-release
libvirt
virt-install
libvirt-python
virt-install
libvirt-client
OVMF
policycoreutils-python
atop
htop
tcpdump
telnet
net-tools
iptables-services
iptables
iscsi-initiator-utils
bind-utils
curl
bridge-utils
pciutils
ntp
filebeat-6.6.1-1
cockpit
cockpit-machines
python2-pip
python2-devel
python2-geoip2
kernel-devel
dkms
rpm-build
yum-utils
usbutils
numactl
git
nload
sysstat
gcc-c++
lm_sensors
ipmitool
traceroute
%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%post --nochroot --log=/mnt/sysimage/tmp/ks-post-nochroot.log
SYSIMG=/mnt/sysimage
cp -f /tmp/ks-pre.log /mnt/sysimage/var/log/anaconda/
cat /tmp/pkid > $SYSIMG/tmp/pkid
cat /tmp/ifname > $SYSIMG/tmp/ifname
cat /tmp/zfsdisk > $SYSIMG/tmp/zfsdisk
cp -rf /pkpro/* $SYSIMG/
%end

%post
# Configure sudoers
echo "gamer        ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers.d/gamer
echo "admin        ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers.d/admin

# Add SSH keys
#  Add root SSH key
mkdir /root/.ssh
chmod 700 /root/.ssh
chmod 600 /root/.ssh/authorized_keys

mkdir /home/admin/.ssh
touch /home/admin/.ssh/authorized_keys
chown admin:admin /home/admin/.ssh
chmod 700 /home/admin/.ssh
chmod 600 /home/admin/.ssh/authorized_keys

# Configure repos
wget https://repo.minecolo.io/qemu.repo -O /etc/yum.repos.d/qemu.repo

# Install Zabbix Agent
rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm
yum install -y zabbix-agent

# Configure sshd
semanage port -a -t ssh_port_t -p tcp 14009
sed -i "s/.*PasswordAuthentication.*/PasswordAuthentication no/g" /etc/ssh/sshd_config
sed -i "s/.*PubkeyAuthentication.*/PubkeyAuthentication yes/g" /etc/ssh/sshd_config
sed -i '/PermitRootLogin/s/^#//' /etc/ssh/sshd_config
sed -i "s/.*PermitRootLogin.*/PermitRootLogin without-password/g" /etc/ssh/sshd_config
sed -i '/Port 22/s/^#//' /etc/ssh/sshd_config
sed -i '/^Port 22/a Port 14009' /etc/ssh/sshd_config

cat << EOF >> /etc/ssh/sshd_config
Match Address 127.0.0.*,10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16,91.237.76.254
    PubkeyAuthentication yes
    PasswordAuthentication yes
EOF

# Enable Cockpit
systemctl enable cockpit.socket

# Install Python2 packages
pip install --upgrade pip==20.3.4
pip install --upgrade requests
pip install --upgrade six
pip install pandas pygsheets

# Enable journald persistent logs
mkdir -p /var/log/journal

# Configure grub
sed -i "s/rhgb quiet/mitigations=off nx_huge_pages=off kvm.nx_huge_pages=off/g" /etc/default/grub

# Install UEK kernel
wget https://yum.oracle.com/RPM-GPG-KEY-oracle-ol7 -O /etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
gpg --quiet --with-fingerprint /etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
yum -y install oraclelinux-release-el7
mv /etc/yum.repos.d/ol7-temp.repo /etc/yum.repos.d/ol7-temp.repo.disabled
yum-config-manager --disable ol7_latest
yum-config-manager --disable ol7_UEKR6 ol7_UEKR6_RDMA
yum-config-manager --enable ol7_UEKR5 ol7_UEKR5_RDMA
yum -y install kernel-uek kernel-uek-devel --enablerepo=ol7_latest

# Install patched QEMU
yum install -y qemu-kvm 
yum -y install OVMF --enablerepo=ol7_kvm_utils

chown -R gamer:gamer /home/gamer/
chown -R admin:admin /home/admin/
chmod 775 /opt/scripts/listvms.py
systemctl enable runonce.service
touch /tmp/runonce

%end


%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end
